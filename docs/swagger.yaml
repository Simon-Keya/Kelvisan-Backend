openapi: 3.0.0
info:
  title: Kelvisan Electrical Networks API
  version: 1.0.0
  description: API documentation for the Kelvisan Electrical Networks Ltd. backend application.
    This API provides endpoints for authentication, product management, category management,
    and newsletter subscriptions for an e-commerce platform.

servers:
  - url: http://localhost:5000/api # Local development server
    description: Development Server
  - url: https://kelvisan-backend.onrender.com/api # Render deployment server (Update if your actual URL changes)
    description: Production Server

security:
  - bearerAuth: [] # Apply bearerAuth globally, then override as needed per path

paths:
  /auth/register:
    post:
      summary: Register a new admin user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: newadmin@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: strongpassword123
      responses:
        '201':
          description: Admin registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input (e.g., missing email/password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # NEW: Response for admin limit reached
          description: Admin limit reached or forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Admin with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Log in an admin user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Account locked due to too many failed attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password: # NEW: Forgot Password endpoint
    post:
      summary: Request a password reset link
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: admin@example.com
      responses:
        '200':
          description: If an account with that email exists, a password reset link has been sent. (Generic success message for security)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If an account with that email exists, a password reset link has been sent.
        '400':
          description: Email is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password: # NEW: Reset Password endpoint
    post:
      summary: Reset password using a token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - email
                - newPassword
              properties:
                token:
                  type: string
                  description: The password reset token received via email.
                  example: 1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d
                email:
                  type: string
                  format: email
                  description: The email associated with the reset request.
                  example: admin@example.com
                newPassword:
                  type: string
                  format: password
                  minLength: 6
                  example: newStrongPassword!23
      responses:
        '200':
          description: Password has been reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully.
        '400':
          description: Invalid input (missing fields, invalid/expired token, or token/email mismatch)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Admin not found for this token (data inconsistency)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      summary: Get current authenticated admin user's details
      tags:
        - Authentication
      security:
        - bearerAuth: [] # This route requires authentication
      responses:
        '200':
          description: Current admin user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin' # Use the Admin schema directly
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories: # UPDATED: Path to plural /categories
    get:
      summary: Get all product categories
      tags:
        - Categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new product category
      tags:
        - Categories
      security:
        - bearerAuth: [] # Requires authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Electronics
                description:
                  type: string
                  nullable: true
                  example: Devices and gadgets
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input (e.g., missing name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Category with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/{id}: # UPDATED: Path to plural /categories/{id}
    get:
      summary: Get a single product category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          schema:
            type: string # UPDATED: ID is now UUID (string)
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
          description: UUID of the category to retrieve
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID format (e.g., not a valid UUID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing product category
      tags:
        - Categories
      security:
        - bearerAuth: [] # Requires authentication
      parameters:
        - in: path
          name: id
          schema:
            type: string # UPDATED: ID is now UUID (string)
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
          description: UUID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Electronics
                description:
                  type: string
                  nullable: true
                  example: All kinds of electronic devices
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input or ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Category name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product category by ID
      tags:
        - Categories
      security:
        - bearerAuth: [] # Requires authentication
      parameters:
        - in: path
          name: id
          schema:
            type: string # UPDATED: ID is now UUID (string)
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
          description: UUID of the category to delete
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete category because products are assigned to it (Foreign Key Constraint)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new product (with image upload)
      tags:
        - Products
      security:
        - bearerAuth: [] # Requires authentication
      requestBody:
        required: true
        content:
          multipart/form-data: # Crucial for file uploads
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input or missing required fields (e.g., name, description, price, image)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      summary: Get a single product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: string # UPDATED: ID is now UUID (string)
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
          description: UUID of the product to retrieve
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing product (with optional image upload)
      tags:
        - Products
      security:
        - bearerAuth: [] # Requires authentication
      parameters:
        - in: path
          name: id
          schema:
            type: string # UPDATED: ID is now UUID (string)
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
          description: UUID of the product to update
      requestBody:
        required: true
        content:
          multipart/form-data: # Crucial for file uploads
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input, ID format, or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product by ID
      tags:
        - Products
      security:
        - bearerAuth: [] # Requires authentication
      parameters:
        - in: path
          name: id
          schema:
            type: string # UPDATED: ID is now UUID (string)
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
          description: UUID of the product to delete
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /newsletter/subscribe: # UPDATED: Specific path for subscribe
    post:
      summary: Subscribe to the newsletter
      tags:
        - Newsletter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: subscriber@example.com
      responses:
        '201':
          description: Subscription successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsletterSubscription'
        '400':
          description: Invalid email or email already subscribed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409': # NEW: Added 409 for already subscribed email
          description: Email is already subscribed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /newsletter/unsubscribe: # NEW: Unsubscribe endpoint
    delete:
      summary: Unsubscribe from the newsletter
      tags:
        - Newsletter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: subscriber@example.com
      responses:
        '200':
          description: Unsubscribed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unsubscribed successfully.
        '400':
          description: Email is required for unsubscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Email not found in subscriber list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /newsletter/subscribers: # NEW: Get all subscribers endpoint (admin only)
    get:
      summary: Get all newsletter subscribers
      tags:
        - Newsletter
      security:
        - bearerAuth: [] # Requires authentication
      responses:
        '200':
          description: A list of newsletter subscribers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsletterSubscription'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"

  schemas:
    Admin:
      type: object
      properties:
        id:
          type: string # UPDATED: ID is now UUID (string)
          format: uuid
          readOnly: true
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: admin@example.com
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:00:00Z'
        updated_at: # NEW: Added updated_at
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:00:00Z'

    AuthResponse: # NEW: Added AuthResponse schema for login/register success
      type: object
      properties:
        message:
          type: string
          example: Login successful
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        admin: # Optional: if you return admin details on login
          $ref: '#/components/schemas/Admin'

    LoginAttempt:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        success:
          type: boolean
          example: true
        attempted_at:
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:05:00Z'

    Category:
      type: object
      properties:
        id:
          type: string # UPDATED: ID is now UUID (string)
          format: uuid
          readOnly: true
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Energy
        description:
          type: string
          nullable: true
          example: Products related to energy solutions.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:10:00Z'
        updated_at: # NEW: Added updated_at
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:10:00Z'

    Product:
      type: object
      properties:
        id:
          type: string # UPDATED: ID is now UUID (string)
          format: uuid
          readOnly: true
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Solar Panel 300W
        image_url: # UPDATED: Changed from 'image' to 'image_url'
          type: string
          format: url
          example: https://res.cloudinary.com/your_cloud_name/image/upload/v1234567890/kelvisan_products/solar_panel.jpg
        description:
          type: string
          example: High-efficiency monocrystalline solar panel.
        price:
          type: number
          format: float
          example: 299.99
        category_id:
          type: string # UPDATED: category_id is now UUID (string)
          format: uuid
          nullable: true
          example: 123e4567-e89b-12d3-a456-426614174001
        category_name:
          type: string
          nullable: true
          example: Energy
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:15:00Z'
        updated_at: # NEW: Added updated_at
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:15:00Z'

    ProductCreateRequest: # Schema for multipart/form-data POST /products
      type: object
      required:
        - name
        - description
        - price
        - image # This is the file input name
      properties:
        name:
          type: string
          example: New Energy Product
        description:
          type: string
          example: A description of the new energy product.
        # Price is sent as a string in FormData from frontend, but should be a number in schema
        price:
          type: number
          format: float
          example: 150.00
        category_id:
          type: string # UPDATED: category_id is now UUID (string)
          format: uuid
          nullable: true
          example: 123e4567-e89b-12d3-a456-426614174001
        # Indicates a file upload
        image:
          type: string
          format: binary # Represents a file upload

    ProductUpdateRequest: # Schema for multipart/form-data PUT /products/{id}
      type: object
      properties:
        name:
          type: string
          example: Updated Product Name
        description:
          type: string
          example: An updated description.
        # Price is sent as a string in FormData from frontend, but should be a number in schema
        price:
          type: number
          format: float
          example: 175.50
        category_id:
          type: string # UPDATED: category_id is now UUID (string)
          format: uuid
          nullable: true
          example: 123e4567-e89b-12d3-a456-426614174002
        # For new image upload
        image:
          type: string
          format: binary # Represents a new file upload
        image_url: # For retaining existing image if no new file is uploaded
          type: string
          format: url
          example: https://res.cloudinary.com/your_cloud_name/image/upload/v1234567890/kelvisan_products/existing_image.jpg

    NewsletterSubscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        email:
          type: string
          format: email
          example: subscriber@example.com
        subscribed_at: # UPDATED: Use subscribed_at as per migration
          type: string
          format: date-time
          readOnly: true
          example: '2023-10-26T10:20:00Z'

    Error:
      type: object
      properties:
        message:
          type: string
          example: Something went wrong.